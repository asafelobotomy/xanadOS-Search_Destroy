#!/usr/bin/env python3
"""
Final verification test for RKHunter optimization button fix
"""

import sys
import tempfile
from pathlib import Path

# Add the app directory to the Python path
sys.path.insert(0, str(Path(__file__).parent / "app"))

def test_final_optimization():
    """Final test to confirm optimization buttons work correctly"""
    print("üéØ Final RKHunter Optimization Test")
    print("=" * 50)

    try:
        from core.rkhunter_optimizer import RKHunterOptimizer, RKHunterConfig, OptimizationReport
        from pathlib import Path

        # Create a real test config file
        user_config_path = str(Path.home() / ".config" / "search-and-destroy" / "rkhunter_test_final.conf")
        Path(user_config_path).parent.mkdir(parents=True, exist_ok=True)

        with open(user_config_path, "w") as f:
            f.write("# Test RKHunter config for final verification\n")
            f.write("LOGFILE=/tmp/rkhunter.log\n")

        print(f"‚úÖ Created test config at: {user_config_path}")

        # Create optimizer
        optimizer = RKHunterOptimizer(config_path=user_config_path)

        # Create test configuration (same as GUI would use)
        config = RKHunterConfig(
            update_mirrors=True,
            mirrors_mode=0,
            auto_update_db=True,
            performance_mode="balanced",
            log_level="info"
        )

        print("üöÄ Testing optimization with real config...")

        # Run optimization
        report = optimizer.optimize_configuration(config)

        # Verify we get a real report
        if report is None:
            print("‚ùå FAILED: optimize_configuration returned None")
            return False

        if not isinstance(report, OptimizationReport):
            print(f"‚ùå FAILED: optimize_configuration returned {type(report)}, expected OptimizationReport")
            return False

        print("‚úÖ SUCCESS: optimize_configuration returned a valid OptimizationReport")
        print(f"   Config changes: {len(report.config_changes)}")
        print(f"   Performance improvements: {len(report.performance_improvements)}")
        print(f"   Recommendations: {len(report.recommendations)}")
        print(f"   Warnings: {len(report.warnings)}")

        # Display some sample results
        if report.config_changes:
            print("   Sample changes:")
            for i, change in enumerate(report.config_changes[:3], 1):
                print(f"     {i}. {change}")

        if report.performance_improvements:
            print("   Sample improvements:")
            for i, improvement in enumerate(report.performance_improvements[:3], 1):
                print(f"     {i}. {improvement}")

        # This confirms the GUI will now receive proper data
        print("\nüéâ OPTIMIZATION BUTTONS SHOULD NOW WORK!")
        print("   The GUI will receive proper OptimizationReport data")
        print("   Results will appear in the Optimization Results tabs")

        return True

    except Exception as e:
        print(f"‚ùå ERROR during final test: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_gui_compatibility():
    """Test that the fix is compatible with GUI expectations"""
    print("\n" + "=" * 50)
    print("üñºÔ∏è Testing GUI Compatibility")

    try:
        from core.rkhunter_optimizer import OptimizationReport
        from datetime import datetime

        # Create a report identical to what the fixed optimizer produces
        test_report = OptimizationReport(
            config_changes=[
                "Created configuration backup",
                "Optimized mirror configuration",
                "Optimized update settings",
                "Enhanced logging configuration",
                "Applied performance optimizations",
                "Updated property database baseline",
                "Optimized scan scheduling"
            ],
            performance_improvements=[
                "Enhanced mirror reliability with UPDATE_MIRRORS=1",
                "Enabled automatic database updates",
                "Improved diagnostic capabilities",
                "Configured for balanced performance mode",
                "Refreshed system baseline for accurate detection",
                "Configured intelligent scan timing"
            ],
            recommendations=[
                "Consider enabling email notifications",
                "Review log rotation settings",
                "Validate custom rule configurations"
            ],
            warnings=[
                "‚ö†Ô∏è Configuration syntax issues detected"
            ],
            baseline_updated=True,
            mirrors_updated=True,
            schedule_optimized=True,
            timestamp=datetime.now().isoformat()
        )

        print("‚úÖ Created test report matching fixed optimizer output")

        # Test that all required fields are present and non-None
        required_fields = [
            'config_changes', 'performance_improvements', 'recommendations',
            'warnings', 'baseline_updated', 'mirrors_updated', 'schedule_optimized', 'timestamp'
        ]

        for field in required_fields:
            value = getattr(test_report, field)
            if value is None:
                print(f"‚ùå FAILED: {field} is None")
                return False
            print(f"‚úÖ {field}: {type(value)} with {len(value) if hasattr(value, '__len__') else value}")

        print("\nüéâ GUI COMPATIBILITY CONFIRMED!")
        print("   All required fields are present and properly typed")
        print("   The GUI ResultsWidget.update_results() will work correctly")

        return True

    except Exception as e:
        print(f"‚ùå ERROR during GUI compatibility test: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üîß RKHunter Optimization Button - Final Verification")
    print("=" * 60)

    success1 = test_final_optimization()
    success2 = test_gui_compatibility()

    print("\n" + "=" * 60)
    print("üèÅ FINAL TEST RESULTS:")
    print(f"   Optimization Function: {'‚úÖ FIXED' if success1 else '‚ùå BROKEN'}")
    print(f"   GUI Compatibility: {'‚úÖ COMPATIBLE' if success2 else '‚ùå INCOMPATIBLE'}")

    if success1 and success2:
        print("\nüéâüéâ SUCCESS! üéâüéâ")
        print("The RKHunter optimization buttons should now work correctly!")
        print("\nWhat was fixed:")
        print("‚Ä¢ Fixed critical indentation bug in optimize_configuration method")
        print("‚Ä¢ Method was returning None when backup succeeded")
        print("‚Ä¢ Now returns proper OptimizationReport in all cases")
        print("‚Ä¢ GUI will display results in all tabs (Changes, Improvements, etc.)")

        print("\nButtons that should now work:")
        print("‚Ä¢ ‚ö° Optimize Configuration")
        print("‚Ä¢ üîÑ Refresh Status")
        print("‚Ä¢ üîê Full Status Refresh")

        print("\nResults will appear in:")
        print("‚Ä¢ Changes tab - Configuration modifications")
        print("‚Ä¢ Improvements tab - Performance enhancements")
        print("‚Ä¢ Recommendations tab - Suggested actions")
        print("‚Ä¢ Warnings tab - Issues or concerns")

    else:
        print("\n‚ùå ISSUES REMAIN")
        print("Additional debugging may be required.")
