# Modern CI/CD Pipeline for Security Applications
# GitHub Actions workflow for 2025 Python security project

name: "Security-First CI/CD Pipeline"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Daily security scans
    - cron: '0 2 * * *'

# Security-focused environment variables
env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.1.0"
  SECURITY_SCAN_LEVEL: "comprehensive"

# Enhanced permissions for security operations
permissions:
  contents: read
  security-events: write
  actions: read
  checks: write

jobs:
  # Security and vulnerability scanning
  security-scan:
    name: "🛡️ Security Analysis"
    runs-on: ubuntu-latest

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: "🔧 Setup Python with uv"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "⚡ Install uv Package Manager"
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: "📦 Install Dependencies"
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev,security]"

      - name: "🔍 Security Code Scan (Bandit)"
        run: |
          source .venv/bin/activate
          bandit -r app/ -f json -o bandit-report.json
          bandit -r app/ -f txt
        continue-on-error: true

      - name: "🔐 Dependency Vulnerability Scan (Safety)"
        run: |
          source .venv/bin/activate
          safety check --json --output safety-report.json
          safety check
        continue-on-error: true

      - name: "📊 Upload Security Reports"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

      - name: "🔒 CodeQL Analysis"
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: "🔍 CodeQL Autobuild"
        uses: github/codeql-action/autobuild@v3

      - name: "📈 CodeQL Analysis Results"
        uses: github/codeql-action/analyze@v3

  # Code quality and linting
  quality-check:
    name: "✨ Code Quality"
    runs-on: ubuntu-latest

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Python with uv"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "⚡ Install uv Package Manager"
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: "📦 Install Dependencies"
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: "🔧 Ruff Linting"
        run: |
          source .venv/bin/activate
          ruff check app/ tests/ --output-format=github

      - name: "🎨 Ruff Formatting Check"
        run: |
          source .venv/bin/activate
          ruff format --check app/ tests/

      - name: "🔍 MyPy Type Checking"
        run: |
          source .venv/bin/activate
          mypy app/ --install-types --non-interactive
        continue-on-error: true

  # Comprehensive testing suite
  test-suite:
    name: "🧪 Test Suite"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "⚡ Install uv Package Manager"
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        shell: bash

      - name: "📦 Install Dependencies"
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev,security]"
        shell: bash

      - name: "🧪 Run Test Suite"
        run: |
          source .venv/bin/activate
          pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --junitxml=pytest-results.xml \
            -v
        shell: bash

      - name: "📊 Upload Test Results"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            pytest-results.xml
            htmlcov/
            .coverage

      - name: "☂️ Upload Coverage to Codecov"
        uses: codecov/codecov-action@v4
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Security-focused integration tests
  security-integration:
    name: "🔐 Security Integration Tests"
    runs-on: ubuntu-latest
    needs: [security-scan, quality-check]

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Python with uv"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "⚡ Install uv Package Manager"
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: "📦 Install Full Security Stack"
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev,security,malware-analysis]"

      - name: "🦠 Install Security Tools"
        run: |
          # Install ClamAV for testing
          sudo apt-get update
          sudo apt-get install -y clamav clamav-daemon
          sudo freshclam || true

      - name: "🧪 Run Security Integration Tests"
        run: |
          source .venv/bin/activate
          pytest tests/integration/security/ -v --tb=short
        continue-on-error: true

  # Build and package verification
  build-package:
    name: "📦 Build & Package"
    runs-on: ubuntu-latest
    needs: [test-suite]

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version detection

      - name: "🔧 Setup Python with uv"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "⚡ Install uv Package Manager"
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: "📦 Install Build Dependencies"
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[packaging]"

      - name: "🏗️ Build Package"
        run: |
          source .venv/bin/activate
          python -m build

      - name: "🔍 Package Verification"
        run: |
          source .venv/bin/activate
          twine check dist/*

      - name: "📊 Upload Build Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/

  # Performance and benchmark testing
  performance-test:
    name: "⚡ Performance Testing"
    runs-on: ubuntu-latest
    needs: [quality-check]

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Python with uv"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "⚡ Install uv Package Manager"
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: "📦 Install Dependencies"
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev,performance]"

      - name: "⚡ Run Performance Benchmarks"
        run: |
          source .venv/bin/activate
          pytest tests/performance/ --benchmark-only --benchmark-json=benchmark.json
        continue-on-error: true

      - name: "📊 Upload Benchmark Results"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: benchmark.json

  # Deployment preparation
  deployment-prep:
    name: "🚀 Deployment Preparation"
    runs-on: ubuntu-latest
    needs: [security-integration, build-package, performance-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "📊 Download All Artifacts"
        uses: actions/download-artifact@v4

      - name: "📋 Generate Release Notes"
        run: |
          echo "# Release Summary" > release-notes.md
          echo "" >> release-notes.md
          echo "## 🔒 Security Enhancements" >> release-notes.md
          echo "- Advanced malware detection capabilities" >> release-notes.md
          echo "- Enhanced threat analysis and response" >> release-notes.md
          echo "- Comprehensive security monitoring" >> release-notes.md
          echo "" >> release-notes.md
          echo "## 🧪 Quality Assurance" >> release-notes.md
          echo "- All security tests passed" >> release-notes.md
          echo "- Code quality standards met" >> release-notes.md
          echo "- Performance benchmarks validated" >> release-notes.md

      - name: "📊 Upload Release Assets"
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            release-notes.md
            python-package/
            security-reports/

# Notification on completion
  notify-completion:
    name: "📢 Pipeline Completion"
    runs-on: ubuntu-latest
    needs: [deployment-prep]
    if: always()

    steps:
      - name: "✅ Success Notification"
        if: needs.deployment-prep.result == 'success'
        run: |
          echo "🎉 Security-First CI/CD Pipeline completed successfully!"
          echo "✅ All security checks passed"
          echo "✅ Code quality standards met"
          echo "✅ Tests completed successfully"
          echo "✅ Package built and verified"

      - name: "❌ Failure Notification"
        if: needs.deployment-prep.result == 'failure'
        run: |
          echo "❌ Security-First CI/CD Pipeline failed"
          echo "🔍 Please review the failed jobs and address issues"
          echo "🔒 Security is our top priority"
