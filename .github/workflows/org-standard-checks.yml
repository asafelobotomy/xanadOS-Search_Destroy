name: org-standard-checks

on:
  workflow_call:
    inputs:
      run-tests:
        description: "Run tests step"
        required: false
        default: true
        type: boolean
      verify-structure:
        description: "Verify directory structure"
        required: false
        default: true
        type: boolean

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Verify structure
        if: inputs.verify-structure == true
        run: |
          bash scripts/validation/verify-structure.sh

      - name: Lint (if configured)
        run: |
          if [ -f package.json ] && jq -e '.scripts.lint' package.json >/dev/null 2>&1; then
            npm ci
            npm run lint
          elif [ -f pyproject.toml ] || [ -f requirements.txt ]; then
            python -m pip install --upgrade pip || true
            if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
            # Try common linters if present
            if command -v ruff >/dev/null 2>&1; then ruff check . || true; fi
            if command -v flake8 >/dev/null 2>&1; then flake8 || true; fi
          else
            echo "No known linter configured; skipping."
          fi

      - name: Run tests (if configured)
        if: inputs.run-tests == true
        run: |
          if [ -f package.json ] && jq -e '.scripts.test' package.json >/dev/null 2>&1; then
            npm test --silent -- --reporter=dot || npm test
          elif [ -f pyproject.toml ] || [ -f requirements.txt ] || ls -1 tests 2>/dev/null | grep -q .; then
            python -m pip install --upgrade pip || true
            pip install pytest || true
            pytest -q || pytest
          else
            echo "No tests detected; create minimal tests under tests/."
            exit 1
          fi

      - name: Security scan
        run: |
          # Check for common secrets patterns
          if command -v grep >/dev/null 2>&1; then
            if grep -r --include="*.py" --include="*.js" --include="*.ts" --include="*.java" --include="*.go" --include="*.cs" --include="*.rb" --include="*.rs" -E "(password|secret|key|token|api_key)\s*=\s*['\"][^'\"]{8,}" . && exit 1; then
              echo "Potential hardcoded secrets detected!"
              exit 1
            fi
          fi

          # Run semgrep if available
          if command -v semgrep >/dev/null 2>&1; then
            semgrep --config=auto --error || echo "Semgrep scan completed with findings"
          fi

      - name: Dependency audit
        run: |
          if [ -f package.json ]; then
            npm audit --audit-level=high || echo "npm audit found issues"
          elif [ -f requirements.txt ]; then
            pip install pip-audit 2>/dev/null || echo "pip-audit not available"
            pip-audit 2>/dev/null || echo "pip-audit completed"
          elif [ -f go.mod ]; then
            go list -json -deps ./... | nancy sleuth 2>/dev/null || echo "nancy scan completed"
          fi

      - name: Accessibility check (if frontend)
        run: |
          if [ -d "src" ] && (ls src/**/*.{tsx,jsx,vue,svelte} 2>/dev/null | head -1); then
            echo "Frontend code detected - consider running accessibility tests"
            # Add axe-core or lighthouse CI when available
            if command -v lighthouse >/dev/null 2>&1; then
              echo "Run: lighthouse --accessibility --output json --output-path lighthouse-a11y.json http://localhost:3000"
            fi
          fi

      - name: API documentation check
        run: |
          if [ -d "api" ] || grep -r "FastAPI\|Express\|Spring" . >/dev/null 2>&1; then
            echo "API code detected - ensure OpenAPI/Swagger documentation is present"
            find . -name "*.yaml" -o -name "*.yml" | grep -i "openapi\|swagger" || echo "Consider adding OpenAPI specification"
          fi
