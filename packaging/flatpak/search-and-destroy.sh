#!/bin/bash
# xanadOS Search & Destroy Flatpak Launcher
# Optimized for PyQt BaseApp environment with proper Python path setup

set -euo pipefail

# Application Information
APP_NAME="xanadOS Search & Destroy"
APP_VERSION="3.0.0"
APP_DIR="/app/lib/search-and-destroy"
CONFIG_DIR="$HOME/.var/app/io.github.asafelobotomy.SearchAndDestroy/config"
DATA_DIR="$HOME/.var/app/io.github.asafelobotomy.SearchAndDestroy/data"
CACHE_DIR="$HOME/.var/app/io.github.asafelobotomy.SearchAndDestroy/cache"

# Create user directories
mkdir -p "$CONFIG_DIR" "$DATA_DIR" "$CACHE_DIR"

# Setup Python environment for PyQt BaseApp
export PYTHONPATH="/app/lib/python3.11/site-packages:$APP_DIR:$PYTHONPATH"
export PYTHONDONTWRITEBYTECODE=1
export PYTHONUNBUFFERED=1

# Application runtime configuration
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"

# ClamAV configuration
export CLAMAV_DB_PATH="/app/share/clamav"
export CLAMAV_CONFIG_PATH="/app/etc/clamav"

# Qt/PyQt6 configuration for Flatpak sandbox
export QT_QPA_PLATFORM_PLUGIN_PATH="/app/lib/plugins"
export QT_PLUGIN_PATH="/app/lib/plugins:$QT_PLUGIN_PATH"
export QT_QPA_PLATFORM="wayland;xcb"  # Prefer Wayland, fallback to X11
export QT_WAYLAND_DISABLE_WINDOWDECORATION=1
export QT_AUTO_SCREEN_SCALE_FACTOR=1
export QT_ENABLE_HIGHDPI_SCALING=1

# Application-specific environment
export SEARCH_DESTROY_CONFIG_DIR="$CONFIG_DIR"
export SEARCH_DESTROY_DATA_DIR="$DATA_DIR"
export SEARCH_DESTROY_CACHE_DIR="$CACHE_DIR"
export SEARCH_DESTROY_LOG_LEVEL="${SEARCH_DESTROY_LOG_LEVEL:-INFO}"
export SEARCH_DESTROY_VERSION="$APP_VERSION"
export SEARCH_DESTROY_RUNTIME="flatpak"

# GPU acceleration (if available and supported)
if [ -n "${MESA_LOADER_DRIVER_OVERRIDE:-}" ] || [ -d "/dev/dri" ]; then
    export SEARCH_DESTROY_GPU_ACCELERATION="auto"
else
    export SEARCH_DESTROY_GPU_ACCELERATION="disabled"
fi

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" >&2
}

# Function to check dependencies
check_dependencies() {
    log "Checking application dependencies..."

    # Check Python
    if ! python3 -c "import sys; print(f'Python {sys.version}')" 2>/dev/null; then
        log "ERROR: Python 3 not available"
        return 1
    fi

    # Check PyQt6
    if ! python3 -c "import PyQt6; print(f'PyQt6 {PyQt6.QtCore.PYQT_VERSION_STR}')" 2>/dev/null; then
        log "ERROR: PyQt6 not available"
        return 1
    fi

    # Check ClamAV
    if ! /app/bin/clamscan --version >/dev/null 2>&1; then
        log "WARNING: ClamAV not available or not working properly"
    fi

    # Check application main module
    if [ ! -f "$APP_DIR/main.py" ]; then
        log "ERROR: Application main.py not found at $APP_DIR/main.py"
        return 1
    fi

    log "Dependency check completed"
    return 0
}

# Function to update ClamAV databases
update_clamav_db() {
    if [ -x "/app/bin/freshclam" ]; then
        log "Attempting to update ClamAV databases..."
        if /app/bin/freshclam --config-file="$CLAMAV_CONFIG_PATH/freshclam.conf" --datadir="$CLAMAV_DB_PATH" --quiet 2>/dev/null; then
            log "ClamAV databases updated successfully"
        else
            log "WARNING: ClamAV database update failed (using existing databases)"
        fi
    fi
}

# Function to setup application configuration
setup_config() {
    log "Setting up application configuration..."

    # Copy default configurations if they don't exist
    if [ -d "/app/share/search-and-destroy/config" ]; then
        for config_file in /app/share/search-and-destroy/config/*; do
            if [ -f "$config_file" ]; then
                basename_config=$(basename "$config_file")
                if [ ! -f "$CONFIG_DIR/$basename_config" ]; then
                    log "Installing default config: $basename_config"
                    cp "$config_file" "$CONFIG_DIR/"
                fi
            fi
        done
    fi

    # Create runtime configuration file
    cat > "$CONFIG_DIR/runtime.conf" << EOF
# xanadOS Search & Destroy Runtime Configuration
# Generated by Flatpak launcher at $(date)

[Runtime]
version = "$APP_VERSION"
environment = "flatpak"
config_dir = "$CONFIG_DIR"
data_dir = "$DATA_DIR"
cache_dir = "$CACHE_DIR"

[ClamAV]
db_path = "$CLAMAV_DB_PATH"
config_path = "$CLAMAV_CONFIG_PATH"

[GPU]
acceleration = "$SEARCH_DESTROY_GPU_ACCELERATION"

[Logging]
level = "$SEARCH_DESTROY_LOG_LEVEL"
file = "$DATA_DIR/search-and-destroy.log"
EOF
}

# Function to handle cleanup on exit
cleanup() {
    local exit_code=$?
    if [ $exit_code -ne 0 ]; then
        log "Application exited with code $exit_code"
    fi
}

# Main execution function
main() {
    log "Starting $APP_NAME v$APP_VERSION (Flatpak)"

    # Set up cleanup handler
    trap cleanup EXIT

    # Check dependencies
    if ! check_dependencies; then
        log "FATAL: Dependency check failed"
        exit 1
    fi

    # Setup configuration
    setup_config

    # Update ClamAV databases (in background, don't block startup)
    update_clamav_db &

    # Change to application directory
    cd "$APP_DIR"

    log "Launching application..."
    log "Command: python3 main.py $*"
    log "Working directory: $(pwd)"
    log "Python path: $PYTHONPATH"

    # Execute the application with all passed arguments
    exec python3 main.py "$@"
}

# Handle command line arguments
case "${1:-}" in
    --version)
        echo "$APP_NAME v$APP_VERSION"
        echo "Runtime: Flatpak (Freedesktop 23.08 + PyQt BaseApp 6.8)"
        if [ -f "/app/share/search-and-destroy/BUILD_INFO" ]; then
            echo
            cat /app/share/search-and-destroy/BUILD_INFO
        fi
        exit 0
        ;;
    --help)
        echo "Usage: $0 [OPTIONS] [ARGUMENTS]"
        echo
        echo "$APP_NAME v$APP_VERSION - Flatpak Edition"
        echo
        echo "Options:"
        echo "  --version     Show version information"
        echo "  --help        Show this help message"
        echo "  --debug       Enable debug logging"
        echo
        echo "All other arguments are passed to the application."
        echo
        echo "Configuration: $CONFIG_DIR"
        echo "Data: $DATA_DIR"
        echo "Cache: $CACHE_DIR"
        exit 0
        ;;
    --debug)
        export SEARCH_DESTROY_LOG_LEVEL="DEBUG"
        set -x
        shift
        ;;
esac

# Run the main function
main "$@"
