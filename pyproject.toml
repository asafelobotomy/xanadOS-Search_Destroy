[project]
name = "xanadOS-Search_Destroy"
version = "2.11.2"
description = "xanadOS Security Scanner and System Protection Suite"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "xanadOS Development Team"}
]
maintainers = [
    {name = "xanadOS Development Team"}
]
keywords = ["security", "antivirus", "malware", "scanner", "protection"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: X11 Applications :: Qt",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities"
]
requires-python = ">=3.11"
dependencies = [
    # Core dependencies from requirements.txt
    "PyQt6>=6.4.0",
    "requests>=2.25.0",
    "psutil>=5.9.0",
    "cryptography>=3.4.0",
    "pyyaml>=6.0",
    "click>=8.0.0",
    "rich>=12.0.0",
    "colorama>=0.4.4",
    "tabulate>=0.9.0"
]

[project.optional-dependencies]
dev = [
    # Core testing framework
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-qt>=4.2.0",
    "pytest-xvfb>=3.0.0",
    "pytest-asyncio>=1.1.0",
    "pytest-xdist>=3.3.0",  # For parallel test execution
    "pytest-timeout>=2.1.0",  # For test timeouts
    # Code quality and linting (modern stack)
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "black>=23.7.0",
    # Security and dependency scanning
    "bandit>=1.7.5",
    "safety>=2.3.0",
    # Pre-commit and automation
    "pre-commit>=3.3.0",
    "tox>=4.6.0",
    # Build and packaging tools
    "build>=0.10.0",
    "wheel>=0.41.0",
    "setuptools>=68.0.0",
    "twine>=4.0.0",
    # Development utilities
    "coverage>=7.2.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=1.0.0",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
]
packaging = [
    "build>=0.10.0",
    "twine>=4.0.0",
    "wheel>=0.41.0",
    "setuptools>=68.0.0",
]
debugging = [
    "ipdb>=0.13.13",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
]
gui-testing = [
    "pytest-qt>=4.2.0",
    "pytest-xvfb>=3.0.0",
]

[project.urls]
"Homepage" = "https://github.com/asafelobotomy/xanadOS-Search_Destroy"
"Bug Tracker" = "https://github.com/asafelobotomy/xanadOS-Search_Destroy/issues"
"Documentation" = "https://github.com/asafelobotomy/xanadOS-Search_Destroy/docs"
"Source Code" = "https://github.com/asafelobotomy/xanadOS-Search_Destroy"
"Changelog" = "https://github.com/asafelobotomy/xanadOS-Search_Destroy/blob/master/CHANGELOG.md"

[project.scripts]
xanados-search-destroy = "app.main:main"
search-and-destroy = "app.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# =============================================================================
# Tool Configuration - Consolidated from multiple config files
# =============================================================================

[tool.ruff]
# Consolidates: .flake8, .pylintrc, and provides modern linting/formatting
target-version = "py311"
line-length = 88
indent-width = 4

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "archive",
    "logs",
    "packaging/icons",
    "dev/node"
]

[tool.ruff.lint]
# Enable comprehensive linting rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # flake8-bandit (security)
    "N",   # pep8-naming
    "D",   # pydocstyle
    "PL",  # pylint
    "RUF", # ruff-specific rules
]

ignore = [
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    "E501",  # Line too long (handled by formatter)
    "S101",  # Use of assert (acceptable in tests)
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]

# Narrow ignores for top-level tests: drop F401 and UP015 here (cleaned files)
"tests/*.py" = [
    # Pre-existing test tolerances
    "S101", "D", "PLR2004",
    # Temporary: keep other noise reductions
    "B007", "PLW1510", "PLR1722", "RUF100", "S603",
    # Additional temporary tolerances
    "S110", "F841", "E402", "B011",
]

# Tests: hardening and demos are now cleaner â€” drop F401 and UP015 there
"tests/hardening/*.py" = [
    "S101", "D", "PLR2004",
    "B007", "PLW1510", "PLR1722", "RUF100", "S603",
    "S110", "F841", "E402", "B011",
]
"tests/demos/*.py" = [
    "S101", "D", "PLR2004",
    "B007", "PLW1510", "PLR1722", "RUF100", "S603",
    "S110", "F841", "E402", "B011",
]
"tests/*/**/*.py" = [
    "S101", "D", "PLR2004",
    "F401", "UP035", "UP006", "UP007", "UP015",
    "B007", "PLW1510", "PLR1722", "RUF100", "S603",
    "S110", "F841", "E402", "B011",
]
"dev/**/*" = ["S101", "D", "PLR2004"]
"scripts/**/*" = ["S101", "D"]
# PyQt6 modules - ignore missing imports and unused imports
"app/gui/**/*" = ["F401"]
"app/utils/**/*" = [
    # Docstring/style noise to be cleaned up incrementally
    "D", "D202", "D205", "D212", "D415",
    # Pyupgrade typing modernizations (will be addressed later)
    "UP006", "UP007",
    # Magic numbers flagged by pylint rules
    "PLR2004",
    # ClassVar requirement for mutable class attributes (legacy design)
    "RUF012",
    # Hard-coded temp dirs (tracked to replace with tempfile in follow-up)
    "S108",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Use Black-compatible formatting
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.black]
# Black configuration (if still needed alongside Ruff)
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | archive
  | logs
)/
'''

[tool.mypy]
# Enhanced type checking configuration
python_version = "3.11"
platform = "linux"

# Import discovery
mypy_path = ["app", "tests"]
packages = ["app"]
namespace_packages = true

# Untyped definitions
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# None and Optional handling
no_implicit_optional = true
strict_optional = true

# Configuring warnings
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true

# Miscellaneous strictness flags
strict_equality = true
strict_concatenate = true
extra_checks = true

# Error output
show_error_codes = true
show_column_numbers = true
show_error_context = true
color_output = true
error_summary = true
pretty = true

# Incremental mode
incremental = true
cache_dir = ".mypy_cache"

# Advanced options
allow_redefinition = false
local_partial_types = false
implicit_reexport = false

# Per-module options
[[tool.mypy.overrides]]
module = [
    "PyQt6.*",
    "psutil.*",
    "requests.*",
    "yaml.*",
    "click.*",
    "rich.*",
    "colorama.*",
    "tabulate.*",
    "cryptography.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "dev.*",
    "archive.*",
]
ignore_errors = true

# Exclude directories that are currently untyped to keep strict checks actionable
exclude = '^(archive/|logs/|dev/|packaging/|scripts/)'

[tool.pytest.ini_options]
# Comprehensive test configuration
minversion = "7.4"
addopts = [
    # Output and reporting
    "-ra",  # Show extra test summary info for all except passed
    "--strict-markers",
    "--strict-config",
    "--showlocals",  # Show local variables in tracebacks
    "--tb=short",  # Shorter traceback format

    # Coverage reporting
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-branch",  # Include branch coverage
    "--cov-fail-under=80",  # Fail if coverage below 80%

    # Parallel execution (requires pytest-xdist)
    "--numprocesses=auto",  # Use all available CPUs
    "--dist=loadfile",  # Distribute tests by file

    # Warnings and deprecations
    "--disable-warnings",  # Reduce noise in test output
    "-p", "no:cacheprovider",  # Disable cache for cleaner runs

    # Performance and debugging
    "--durations=10",  # Show 10 slowest tests
    "--maxfail=5",  # Stop after 5 failures
]

# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]

# Test markers for categorization
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: marks tests as fast",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gui: marks tests as GUI tests (require display)",
    "network: marks tests that require network access",
    "security: marks security-related tests",
    "performance: marks performance benchmark tests",
    "smoke: marks basic smoke tests",
    "regression: marks regression tests",
    "flaky: marks potentially flaky tests",
    "xfail: marks tests expected to fail",
    "skip: marks tests to skip",
]

# Filtering and execution
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
    "ignore:.*PyQt6.*:DeprecationWarning",
]

# Logging configuration
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Timeout for long-running tests
timeout = 300  # 5 minutes max per test
timeout_method = "thread"

# PyQt6 GUI testing
qt_api = "pyqt6"
qt_no_exception_capture = false

# Asyncio configuration
asyncio_mode = "auto"

[tool.coverage.run]
# Coverage measurement configuration
source = ["app"]
branch = true  # Measure branch coverage
parallel = true  # Support parallel test execution
context = "pytest"  # Add context for better reporting

# Files to include/exclude
omit = [
    "*/tests/*",
    "*/test_*",
    "*/*_test.py",
    "*/dev/*",
    "*/archive/*",
    "*/logs/*",
    "*/build/*",
    "*/dist/*",
    "*/.venv/*",
    "*/.tox/*",
    "*/venv/*",
    "*/site-packages/*",
    "*/__pycache__/*",
    "*/conftest.py",
    "*/setup.py",
]

# Dynamic analysis options (disabled for xdist compatibility)
# dynamic_context = "test_function"  # Disabled due to pytest-xdist conflict
timid = false
disable_warnings = ["no-data-collected"]

[tool.coverage.report]
# Coverage reporting configuration
precision = 2
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"

# Exclusion patterns for lines not to be covered
exclude_lines = [
    # Standard exclusions
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",

    # Debugging and development
    "if self.debug:",
    "if settings.DEBUG",
    "if DEBUG:",

    # Conditional imports and typing
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "except ImportError:",

    # Abstract methods and protocols
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@abstractmethod",

    # Platform-specific code
    "if sys.platform",
    "if platform.system",

    # Error handling that shouldn't be tested
    "except KeyboardInterrupt:",
    "except SystemExit:",

    # GUI event handling that's hard to test
    "def closeEvent",
    "def paintEvent",
    "def resizeEvent",

    # Default values in dataclasses
    "field\\(default_factory=",
]

# Partial branch exclusions
partial_branches = [
    "pragma: no branch",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
]

# Minimum coverage thresholds
fail_under = 80

[tool.coverage.html]
# HTML report configuration
directory = "htmlcov"
title = "xanadOS Search & Destroy - Code Coverage Report"
show_contexts = true
skip_covered = false
skip_empty = false

[tool.coverage.xml]
# XML report configuration (for CI/CD)
output = "coverage.xml"

[tool.coverage.json]
# JSON report configuration
output = "coverage.json"
pretty_print = true
show_contexts = true

[tool.flake8]
# Align flake8 with Black and repository standards
max-line-length = 88
extend-ignore = [
    "E203",  # Whitespace before ':' (conflicts with Black)
    "E266",  # Too many leading '#' for block comment
    "E501",  # Line too long (handled by Black)
    "W503",  # Line break before binary operator (Black's style)
]
exclude = [
    ".git",
    ".tox",
    ".venv",
    ".mypy_cache",
    "build",
    "dist",
    "node_modules",
    "archive",
    "logs",
    "packaging/icons",
    "dev/node",
]
per-file-ignores = [
    "__init__.py:F401,E402",
    "tests/**/*:F401,F841,E402",
    "dev/**/*:F401,F841,E402",
    "app/main.py:E402",
    "tests/test_implementation.py:E402",
]

# =============================================================================
# Additional Modern Tool Configurations
# =============================================================================

[tool.bandit]
# Security linting configuration
targets = ["app"]
exclude_dirs = ["tests", "dev", "archive", "logs"]
skips = [
    "B101",  # Test for use of assert
    "B603",  # subprocess call - check for execution of untrusted input
]

[tool.safety]
# Dependency vulnerability scanning
ignore = [
    # Add any known false positives here
]

[tool.isort]
# Import sorting (if still needed alongside Ruff)
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    "archive/**/*",
    "logs/**/*",
    "dev/node/**/*",
]

[tool.pylint]
# Enhanced pylint configuration
[tool.pylint.main]
load-plugins = [
    "pylint.extensions.check_elif",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.docparams",
    "pylint.extensions.for_any_all",
    "pylint.extensions.set_membership",
    "pylint.extensions.code_style",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.typing",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.comparison_placement",
]

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name (doesn't conform to naming convention)
    "C0111",  # Missing docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0613",  # Unused argument
    "W0622",  # Redefined builtin
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 8
max-locals = 20
max-branches = 15
max-statements = 60

[tool.tox]
# Test automation across Python versions
legacy_tox_ini = """
[tox]
envlist = py311,py312,lint,type,security
isolated_build = true

[testenv]
deps =
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-qt>=4.2.0
    pytest-mock>=3.11.1
commands = pytest {posargs}

[testenv:lint]
deps =
    ruff>=0.1.0
    black>=23.7.0
commands =
    ruff check app tests
    ruff format --check app tests
    black --check app tests

[testenv:type]
deps =
    mypy>=1.5.0
    types-requests
    types-PyYAML
commands = mypy app

[testenv:security]
deps =
    bandit>=1.7.5
    safety>=2.3.0
commands =
    bandit -r app
    safety check

[testenv:docs]
deps =
    sphinx>=7.1.0
    sphinx-rtd-theme>=1.3.0
commands =
    sphinx-build -b html docs docs/_build
"""

[tool.hatch]
# Modern Python packaging with Hatch
version.source = "vcs"

[tool.hatch.build]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/dev",
    "/archive",
    "/logs",
    "*.log",
]

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-qt>=4.2.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=app --cov-report=term-missing {args:tests}"
cov-report = "coverage report"
cov-html = "coverage html"

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "ruff>=0.1.0",
    "black>=23.7.0",
    "mypy>=1.5.0",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:app tests}"
style = [
    "ruff check {args:.}",
    "ruff format --check {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff format {args:.}",
    "ruff check --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.hatch.envs.security]
dependencies = [
    "bandit>=1.7.5",
    "safety>=2.3.0",
]

[tool.hatch.envs.security.scripts]
scan = [
    "bandit -r app",
    "safety check",
]

[tool.semantic_release]
# Automated versioning and changelog generation
version_toml = ["pyproject.toml:project.version"]
branch = "main"
changelog_file = "CHANGELOG.md"
build_command = "python -m build"
dist_path = "dist/"
remove_dist = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.commit_parser_options]
allowed_tags = ["feat", "fix", "docs", "style", "refactor", "perf", "test", "chore"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.interrogate]
# Documentation coverage tool
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["archive", "dev", "logs", "tests"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

[tool.vulture]
# Dead code detection
paths = ["app"]
exclude = ["archive/", "dev/", "logs/", "tests/"]
ignore_decorators = ["@app.route", "@require_*"]
ignore_names = ["_*", "test_*"]
make_whitelist = true
min_confidence = 60
sort_by_size = true

[tool.pydocstyle]
# Docstring style checking
inherit = false
convention = "google"
add_ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D107"]
match_dir = "app"

[tool.docformatter]
# Docstring formatting
wrap-summaries = 72
wrap-descriptions = 72
make-summary-multi-line = false
close-quotes-on-newline = false
force-wrap = false
tab-width = 4
