name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is_prerelease: ${{ steps.extract.outputs.is_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version info
        id: extract
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          if [[ $VERSION =~ -[a-zA-Z] ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

  quality-checks:
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run validation system
        run: node .github/validation/templates/template-validation-system.js

      - name: Run quality checks
        run: |
          npm run lint || true
          npm run test || true

      - name: Verify repository structure
        run: |
          chmod +x scripts/utils/verify-structure.sh
          ./scripts/utils/verify-structure.sh

  build-artifacts:
    runs-on: ubuntu-latest
    needs: [validate-version, quality-checks]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create release archive
        run: |
          mkdir -p dist
          tar -czf dist/copilot-enhancement-framework-${{ needs.validate-version.outputs.version }}.tar.gz \
            --exclude=dist \
            --exclude=node_modules \
            --exclude=.git \
            .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist/

  create-release:
    runs-on: ubuntu-latest
    needs: [validate-version, quality-checks, build-artifacts]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-artifacts
          path: dist/

      - name: Generate release notes
        id: release_notes
        run: |
          # Extract changelog section for this version
          VERSION=${{ needs.validate-version.outputs.version }}
          sed -n "/## \[${VERSION#v}\]/,/## \[/p" CHANGELOG.md | head -n -1 > release_notes.md

          if [ ! -s release_notes.md ]; then
            echo "## Changes in $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-version.outputs.version }}
          name: Release ${{ needs.validate-version.outputs.version }}
          body_path: release_notes.md
          prerelease: ${{ needs.validate-version.outputs.is_prerelease }}
          files: |
            dist/*.tar.gz
            CHANGELOG.md
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-documentation:
    runs-on: ubuntu-latest
    needs: [create-release]
    if: needs.validate-version.outputs.is_prerelease == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update documentation
        run: |
          # Update any version references in documentation
          VERSION=${{ needs.validate-version.outputs.version }}
          echo "Documentation updated for $VERSION"

  notify-teams:
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    steps:
      - name: Notify on success
        if: needs.create-release.result == 'success'
        run: |
          echo "✅ Release ${{ needs.validate-version.outputs.version }} created successfully"

      - name: Notify on failure
        if: needs.create-release.result == 'failure'
        run: |
          echo "❌ Release ${{ needs.validate-version.outputs.version }} failed"
