name: Security Scan

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety semgrep
    
    - name: Run Bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json
        bandit -r app/ --exit-zero  # Don't fail on security issues, just report
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run Semgrep
      run: |
        semgrep --config=auto app/ --json --output=semgrep-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-${{ github.run_number }}
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
    
    - name: Create security issue if vulnerabilities found
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let issueBody = '## ðŸš¨ Security Scan Results\n\n';
          issueBody += 'Automated security scan found potential vulnerabilities:\n\n';
          
          // Add timestamp
          issueBody += `**Scan Date:** ${new Date().toISOString()}\n\n`;
          
          // Check if reports exist and add summaries
          try {
            if (fs.existsSync('bandit-report.json')) {
              const banditReport = JSON.parse(fs.readFileSync('bandit-report.json'));
              issueBody += `**Bandit Issues:** ${banditReport.metrics?.issues || 0}\n`;
            }
            
            if (fs.existsSync('safety-report.json')) {
              const safetyReport = JSON.parse(fs.readFileSync('safety-report.json'));
              issueBody += `**Safety Vulnerabilities:** ${safetyReport.vulnerabilities?.length || 0}\n`;
            }
          } catch (e) {
            issueBody += '**Error:** Could not parse security reports\n';
          }
          
          issueBody += '\n---\n';
          issueBody += 'Please review the security scan artifacts and address any issues found.';
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `ðŸš¨ Security Scan Alert - ${new Date().toISOString().split('T')[0]}`,
            body: issueBody,
            labels: ['security', 'automated']
          });
