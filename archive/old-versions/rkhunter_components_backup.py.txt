#!/usr/bin/env python3
"""
RKHunter scan dialog and thread components for S&D - Search & Destroy
"""

import logging
from typing import List, Optional

from core.rkhunter_wrapper import RKHunterScanResult, RKHunterWrapper
from PyQt6.QtCore import QThread, pyqtSignal
from PyQt6.QtWidgets import (
    QCheckBox,
    QDialog,
    QGroupBox,
    QHBoxLayout,
    QLabel,
    QMessageBox,
    QPushButton,
    QScrollArea,
    QVBoxLayout,
    QWidget,
)


class RKHunterScanDialog(QDialog):
    """Dialog for configuring RKHunter scan options."""

def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("RKHunter Scan Configuration")
        self.setModal(True)
        self.resize(500, 600)
        self.parent_window = parent

# Test category checkboxes
        self.category_checkboxes = {}

        self.init_ui()

# Apply parent theme if available
        if parent and hasattr(parent, "current_theme"):
            self.apply_theme(parent.current_theme)

def init_ui(self):
        """Initialize the user interface."""
        layout = QVBoxLayout(self)

# Title
        title_label = QLabel("Configure RKHunter Rootkit Scan")
        title_label.setStyleSheet(
            "font-size: 16px; font-weight: bold; margin-bottom: 10px;"
        )
        layout.addWidget(title_label)

# Description
        desc_label = QLabel(
            "Select test categories to run. RKHunter will check your system for "
            "rootkits, trojans, and other malicious software.\n\n"
            "‚ö†Ô∏è This scan may take several minutes to complete.")
        desc_label.setWordWrap(True)
        desc_label.setStyleSheet("margin-bottom: 15px;")
        layout.addWidget(desc_label)

# Test categories group
        categories_group = QGroupBox("Test Categories")
        categories_layout = QVBoxLayout(categories_group)

# Create scrollable area for checkboxes
        scroll_area = QScrollArea()
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)

# Define test categories with descriptions
        test_categories = {
            "system_commands": {
                "name": "System Commands",
                "description": "Check system command integrity and known rootkit modifications",
            },
            "rootkits": {
                "name": "Rootkits & Trojans",
                "description": "Scan for known rootkits, trojans, and malware signatures",
            },
            "network": {
                "name": "Network Security",
                "description": "Check network interfaces, ports, and packet capture tools",
            },
            "system_integrity": {
                "name": "System Integrity",
                "description": "Verify filesystem integrity, system configs, and startup files",
            },
            "applications": {
                "name": "Applications",
                "description": "Check for hidden processes, files, and suspicious applications",
            },
        }

# Create checkboxes for each category
        for category_id, category_info in test_categories.items():
            checkbox = QCheckBox(category_info["name"])
            checkbox.setChecked(True)  # Default to all selected
            checkbox.setToolTip(category_info["description"])
            checkbox.setStyleSheet("margin: 5px 0px;")

# Add description label
            desc_label = QLabel(f"  {category_info['description']}")
            desc_label.setStyleSheet(
                f"color: {
                    self.get_theme_color('secondary_text') if hasattr(
                        self,
                        'get_theme_color') else '#666'}; font-size: 11px; margin-left: 20px; margin-bottom: 10px;")
            desc_label.setWordWrap(True)

            scroll_layout.addWidget(checkbox)
            scroll_layout.addWidget(desc_label)

            self.category_checkboxes[category_id] = checkbox

        scroll_layout.addStretch()
        scroll_area.setWidget(scroll_widget)
        scroll_area.setMaximumHeight(300)
        categories_layout.addWidget(scroll_area)

        layout.addWidget(categories_group)

# Quick select buttons
        quick_select_layout = QHBoxLayout()

        select_all_btn = QPushButton("Select All")
        select_all_btn.clicked.connect(self.select_all_categories)

        select_none_btn = QPushButton("Select None")
        select_none_btn.clicked.connect(self.select_no_categories)

        recommended_btn = QPushButton("Recommended")
        recommended_btn.clicked.connect(self.select_recommended_categories)
        recommended_btn.setToolTip(
            "Select recommended test categories for most users")

        quick_select_layout.addWidget(select_all_btn)
        quick_select_layout.addWidget(select_none_btn)
        quick_select_layout.addWidget(recommended_btn)
        quick_select_layout.addStretch()

        layout.addLayout(quick_select_layout)

# Warning and authentication notice
        warning_label = QLabel(
            "‚ö†Ô∏è <b>Administrator Authentication Required:</b><br/><br/>"
            "RKHunter requires elevated privileges to scan system areas for rootkits. "
            "You will be prompted for your password when the scan starts.<br/><br/>"
            "<b>This is normal and required for:</b><br/>"
            "‚Ä¢ Accessing protected system files and directories<br/>"
            "‚Ä¢ Checking kernel modules and system processes<br/>"
            "‚Ä¢ Verifying system integrity and detecting rootkits<br/><br/>"
            "The scan may be resource-intensive and can trigger security software alerts.<br/><br/>"
            "<b>üìã Note:</b> Scan preferences have been moved to Settings ‚Üí Scanning ‚Üí RKHunter Integration. "
            "You can configure which test categories to run by default there.")
        warning_label.setWordWrap(True)
        warning_label.setStyleSheet(
            f"background-color: {self.get_theme_color('warning') if hasattr(self, 'get_theme_color') else '#fff3cd'}; "
            f"border: 1px solid {self.get_theme_color('border') if hasattr(self, 'get_theme_color') else '#ffeaa7'}; "
            "padding: 15px; border-radius: 5px; margin: 15px 0px; "
            "font-size: 13px; line-height: 1.4;"
        )
        layout.addWidget(warning_label)

# Buttons
        buttons_layout = QHBoxLayout()
        buttons_layout.addStretch()

        cancel_btn = QPushButton("Cancel")
        cancel_btn.clicked.connect(self.reject)

        start_btn = QPushButton("Start Scan")
        start_btn.clicked.connect(self.accept)
        start_btn.setDefault(True)
        start_btn.setStyleSheet(
            f"QPushButton {{ background-color: {
                self.get_theme_color('success') if hasattr(
                    self, 'get_theme_color') else '#007bff'}; "
            f"color: {
                self.get_theme_color('primary_text') if hasattr(
                    self, 'get_theme_color') else 'white'}; "
            "font-weight: bold; padding: 8px 20px; border-radius: 4px; }"
            f"QPushButton:hover {{ background-color: {
                self.get_theme_color('hover_bg') if hasattr(
                    self, 'get_theme_color') else '#0056b3'}; }}"
        )

        buttons_layout.addWidget(cancel_btn)
        buttons_layout.addWidget(start_btn)

        layout.addLayout(buttons_layout)

def select_all_categories(self):
        """Select all test categories."""
        for checkbox in self.category_checkboxes.values():
            checkbox.setChecked(True)

def select_no_categories(self):
        """Deselect all test categories."""
        for checkbox in self.category_checkboxes.values():
            checkbox.setChecked(False)

def select_recommended_categories(self):
        """Select recommended test categories."""
        recommended = ["rootkits", "system_commands", "system_integrity"]

        for category_id, checkbox in self.category_checkboxes.items():
            checkbox.setChecked(category_id in recommended)

def get_selected_categories(self) -> List[str]:
        """Get list of selected test categories."""
        selected = []
        for category_id, checkbox in self.category_checkboxes.items():
            if checkbox.isChecked():
                selected.append(category_id)
        return selected

def get_theme_color(self, color_type: str) -> str:
        """Get theme color from parent window if available."""
        if self.parent_window and hasattr(
                self.parent_window, "get_theme_color"):
            return self.parent_window.get_theme_color(color_type)

# Fallback colors if parent doesn't have theme system
        fallback_colors = {
            "background": "#1a1a1a",
            "secondary_bg": "#2a2a2a",
            "tertiary_bg": "#3a3a3a",
            "primary_text": "#FFCDAA",
            "success": "#9CB898",
            "error": "#F14666",
            "warning": "#EE8980",
            "accent": "#F14666",
            "border": "#EE8980",
            "hover_bg": "#4a4a4a",
            "pressed_bg": "#2a2a2a",
        }
        return fallback_colors.get(color_type, "#FFCDAA")

def apply_theme(self, theme_name: str):
        """Apply theme styling to the dialog."""
        bg = self.get_theme_color("background")
        secondary_bg = self.get_theme_color("secondary_bg")
        tertiary_bg = self.get_theme_color("tertiary_bg")
        text = self.get_theme_color("primary_text")
        success = self.get_theme_color("success")
        border = self.get_theme_color("border")
        hover_bg = self.get_theme_color("hover_bg")
        pressed_bg = self.get_theme_color("pressed_bg")
        accent = self.get_theme_color("accent")

        style = """
            QDialog {{
                background-color: {bg};
                color: {text};
            }}
            QLabel {{
                color: {text};
            }}
            QGroupBox {{
                color: {text};
                border: 2px solid {tertiary_bg};
                border-radius: 5px;
                margin-top: 10px;
                font-weight: bold;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px;
            }}
            QCheckBox {{
                color: {text};
                spacing: 8px;
            }}
            QCheckBox::indicator {{
                width: 18px;
                height: 18px;
            }}
            QCheckBox::indicator:unchecked {{
                border: 2px solid {tertiary_bg};
                background-color: {bg};
                border-radius: 3px;
            }}
            QCheckBox::indicator:checked {{
                border: 2px solid {success};
                background-color: {success};
                border-radius: 3px;
            }}
            QPushButton {{
                background-color: {tertiary_bg};
                border: 2px solid {border};
                border-radius: 5px;
                padding: 8px 16px;
                color: {text};
                font-weight: 600;
                min-width: 80px;
            }}
            QPushButton:hover {{
                background-color: {hover_bg};
                border-color: {accent};
            }}
            QPushButton:pressed {{
                background-color: {pressed_bg};
            }}
            QScrollArea {{
                border: 1px solid {tertiary_bg};
                border-radius: 5px;
                background-color: {bg};
            }}
            QScrollBar:vertical {{
                background-color: {secondary_bg};
                width: 12px;
                border-radius: 6px;
            }}
            QScrollBar::handle:vertical {{
                background-color: {hover_bg};
                border-radius: 6px;
                min-height: 20px;
            }}
            QScrollBar::handle:vertical:hover {{
                background-color: {accent};
            }}
        """
        self.setStyleSheet(style)


class RKHunterScanThread(QThread):
    """Thread for running RKHunter scans without blocking the UI."""

    progress_updated = pyqtSignal(str)
    scan_completed = pyqtSignal(object)  # RKHunterScanResult

def __init__(self, rkhunter: RKHunterWrapper,
                 test_categories: Optional[List[str]] = None):
        super().__init__()
        self.rkhunter = rkhunter
        self.test_categories = test_categories
        self.logger = logging.getLogger(__name__)

def run(self):
        """Run the RKHunter scan in a separate thread."""
        try:
            self.progress_updated.emit("Preparing RKHunter scan...")

# Check authentication methods available
            pkexec_available = self.rkhunter._find_executable("pkexec")

            if not self.rkhunter.is_functional():
                if pkexec_available:
                    self.progress_updated.emit(
                        "üîê GUI password dialog will appear for authentication..."
                    )
                else:
                    self.progress_updated.emit(
                        "‚ö†Ô∏è Terminal password prompt may appear..."
                    )
# Small delay to ensure the message is visible
import time

                time.sleep(1)

            self.progress_updated.emit("Initializing RKHunter scan...")

# Update database first
            if pkexec_available:
                self.progress_updated.emit(
                    "Updating RKHunter database (GUI authentication)..."
                )
            else:
                self.progress_updated.emit(
                    "Updating RKHunter database (may require password)..."
                )

            update_success = self.rkhunter.update_database()

            if not update_success:
                self.logger.warning(
                    "Failed to update RKHunter database, continuing with scan"
                )
                self.progress_updated.emit(
                    "Database update failed, continuing with existing database..."
                )
            else:
                self.progress_updated.emit("Database updated successfully")

# Start the scan
            self.progress_updated.emit("Running rootkit detection scan...")
            result = self.rkhunter.scan_system(
                test_categories=self.test_categories)

            self.progress_updated.emit("Scan completed")
            self.scan_completed.emit(result)

        except Exception as e:
            self.logger.error("Error in RKHunter scan thread: %s", e)

# Create error result
from datetime import datetime

from core.rkhunter_wrapper import RKHunterScanResult

            error_result = RKHunterScanResult(
                scan_id=f"error_{int(datetime.now().timestamp())}",
                start_time=datetime.now(),
                end_time=datetime.now(),
                success=False,
                error_message=f"Scan thread error: {str(e)}",
            )

            self.scan_completed.emit(error_result)
